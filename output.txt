        OCaml version 4.02.1

# val subset : 'a list -> 'a list -> bool = <fun>
val equal_sets : 'a list -> 'a list -> bool = <fun>
val compare : 'a -> 'a -> int = <fun>
val set_union : 'a list -> 'a list -> 'a list = <fun>
val set_intersection : 'a list -> 'a list -> 'a list = <fun>
val set_diff : 'a list -> 'a list -> 'a list = <fun>
val computed_fixed_point : ('a -> 'a -> bool) -> ('a -> 'a) -> 'a -> 'a =
  <fun>
val computed_periodic_point :
  ('a -> 'a -> bool) -> ('a -> 'a) -> int -> 'a -> 'a = <fun>
type ('nonterminal, 'terminal) symbol = N of 'nonterminal | T of 'terminal
val t_or_nt : ('a, 'b) symbol -> bool = <fun>
val is_terminal_list : ('a, 'b) symbol list -> bool = <fun>
val is_terminal_rule : 'a * ('b, 'c) symbol list -> bool = <fun>
val add_rules :
  ('a * ('b, 'c) symbol list) list -> 'd -> ('a * ('b, 'c) symbol list) list =
  <fun>
val take_first : ('a * 'b) list -> 'c -> 'a list = <fun>
val take_second : ('a, 'b) symbol list -> 'c -> 'a list = <fun>
val old_to_new :
  ('a * ('b, 'c) symbol list) list ->
  ('b * 'd) list -> ('a * ('b, 'c) symbol list) list = <fun>
val filter :
  'a * ('b * ('b, 'c) symbol list) list ->
  ('b * ('b, 'c) symbol list) list -> ('b * ('b, 'c) symbol list) list =
  <fun>
val filter_blind_alleys_allias :
  'a * ('b * ('b, 'c) symbol list) list ->
  'd -> ('b * ('b, 'c) symbol list) list = <fun>
val filter_blind_alleys :
  'a * ('b * ('b, 'c) symbol list) list ->
  'a * ('b * ('b, 'c) symbol list) list = <fun>
# val subset_test0 : bool = true
val subset_test1 : bool = true
val subset_test2 : bool = true
val equal_sets_test0 : bool = true
val equal_sets_test1 : bool = false
val set_union_test0 : bool = true
val set_union_test2 : bool = true
val set_intersection_test0 : bool = true
val set_intersection_test1 : bool = true
val set_diff_test0 : bool = true
val set_diff_test1 : bool = true
val set_diff_test2 : bool = true
val computed_fixed_point_test0 : bool = true
val computed_fixed_point_test1 : bool = true
val computed_fixed_point_test0 : bool = true
val computed_periodic_point_test0 : bool = true
val computed_periodic_point_test1 : bool = true
type awksub_nonterminals = Fox | Wolf | Bear | Dolphin | Shark
val t_or_nt0 : bool = true
val t_or_nt1 : bool = true
val t_or_nt2 : bool = true
val t_or_nt3 : bool = true
val li_0 : (awksub_nonterminals, string) symbol list = [T "("; N Fox; T ")"]
val li_1 : ('a, string) symbol list = [T "("; T "5"; T "++"]
val li_2 : (awksub_nonterminals, string) symbol list =
  [T "panos"; N Wolf; N Dolphin]
val li_3 : (awksub_nonterminals, 'a) symbol list = [N Bear; N Shark; N Fox]
val is_terminal_list0 : bool = true
val is_terminal_list1 : bool = true
val is_terminal_list2 : bool = true
val is_terminal_list3 : bool = true
val rule_0 : awksub_nonterminals * (awksub_nonterminals, string) symbol list =
  (Fox, [T "("; N Fox; T ")"])
val rule_1 : awksub_nonterminals * ('a, string) symbol list =
  (Wolf, [T "("; T "4"; T ")"])
val is_terminal_rule0 : bool = true
val is_terminal_rule1 : bool = true
val rules_0 :
  (awksub_nonterminals * (awksub_nonterminals, string) symbol list) list =
  [(Fox, [T "("; N Fox; T ")"]); (Fox, [N Shark]); (Fox, [T "panos"]);
   (Fox, [N Fox; N Dolphin; N Fox]); (Fox, [T "++"; T "-"; T "2"]);
   (Fox, [T "5"; T "--"; T "1"]); (Wolf, [T "valuez"])]
val add_rules0 : bool = true
val animal_rules :
  (awksub_nonterminals * (awksub_nonterminals, string) symbol list) list =
  [(Fox, [N Fox; T "cs"; T ")"]); (Fox, [N Shark]);
   (Fox, [N Fox; N Dolphin; N Fox]); (Fox, [N Wolf]);
   (Fox, [N Bear; N Wolf]); (Fox, [N Wolf; N Bear]); (Wolf, [T "$"; N Fox]);
   (Bear, [T "++"]); (Bear, [T "--"]); (Dolphin, [T "+"]);
   (Dolphin, [T "-"]); (Shark, [T "99"])]
val add_rules1 : bool = true
val take_first0 : bool = true
val second_part : (awksub_nonterminals, string) symbol list =
  [T "pao"; N Fox; N Dolphin]
val take_second0 : bool = true
val simple_rules :
  (awksub_nonterminals * (awksub_nonterminals, string) symbol list) list =
  [(Fox, [T "5"; N Wolf; T "j"]); (Dolphin, [N Wolf]); (Bear, [N Shark]);
   (Fox, [N Dolphin; N Shark]); (Shark, [T "6"])]
val simple_grammar :
  awksub_nonterminals *
  (awksub_nonterminals * (awksub_nonterminals, string) symbol list) list =
  (Fox,
   [(Fox, [T "5"; N Wolf; T "j"]); (Dolphin, [N Wolf]); (Bear, [N Shark]);
    (Fox, [N Dolphin; N Shark]); (Shark, [T "6"])])
val animal_grammar :
  awksub_nonterminals *
  (awksub_nonterminals * (awksub_nonterminals, string) symbol list) list =
  (Fox,
   [(Fox, [N Fox; T "cs"; T ")"]); (Fox, [N Shark]);
    (Fox, [N Fox; N Dolphin; N Fox]); (Fox, [N Wolf]);
    (Fox, [N Bear; N Wolf]); (Fox, [N Wolf; N Bear]); (Wolf, [T "$"; N Fox]);
    (Bear, [T "++"]); (Bear, [T "--"]); (Dolphin, [T "+"]);
    (Dolphin, [T "-"]); (Shark, [T "99"])])
val filter0 : bool = true
val filter_blind_alleys_allias0 : bool = true
val filter_blind_alleys0 : bool = true
#   
